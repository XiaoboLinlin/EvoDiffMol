"""
Pytest configuration and shared fixtures for EvoDiffMol tests.
"""

import pytest
import os
from pathlib import Path

# Standard test configuration
STANDARD_TEST_CONFIG = {
    'population_size': 16,
    'generations': 3,
    'device': 'cuda',
}


@pytest.fixture(scope="session")
def checkpoint_path():
    """Path to test checkpoint."""
    path = "logs_moses/moses_without_h/moses_full_ddpm_2losses_2025_08_15__16_37_07_resume/checkpoints/80.pt"
    if not os.path.exists(path):
        pytest.skip(f"Checkpoint not found: {path}")
    return path


@pytest.fixture(scope="session")
def model_config_path():
    """Path to model config."""
    return "configs/general_without_h.yml"


@pytest.fixture(scope="session")
def ga_config_path():
    """Path to GA config."""
    return "ga_config/moses_production.yml"


@pytest.fixture(scope="session")
def dataset():
    """
    Load validation dataset for metadata only.
    
    NOTE: For non-scaffold tests, the dataset is only used for metadata (atom types, 
    molecule size distribution) which comes from the checkpoint. The actual molecules 
    are NOT sampled from the dataset - they're generated by the diffusion model.
    Therefore, we use the validation set which is smaller (~175k molecules vs 1.9M train set).
    
    This is loaded once per test session and reused across all tests.
    Loading time: ~3-5s (validation set is pre-cached).
    """
    from evodiffmol.utils.datasets import General3D
    
    # Load validation set (smaller than train, already cached)
    dataset = General3D(
        dataset_name='moses',
        split='valid',  # Use validation set (~175k molecules, ~2GB)
        root='datasets',
        remove_h=True
    )
    
    return dataset


@pytest.fixture(scope="session")
def scaffold_dataset():
    """
    Load scaffold-filtered dataset for scaffold-based tests.
    
    Note: This requires filtering the full MOSES dataset for scaffold matches.
    First run may take longer as it processes 1.9M molecules.
    """
    from utils.dataset_scaffold_smiles import create_scaffold_dataset
    
    # Use benzene as default test scaffold
    dataset = create_scaffold_dataset(
        scaffold_smiles='c1ccccc1',  # Benzene
        dataset_name='moses',
        remove_h=True,
        root='datasets'
    )
    
    return dataset


@pytest.fixture
def generator(checkpoint_path, model_config_path, ga_config_path, dataset):
    """
    Create a MoleculeGenerator instance for testing.
    
    This fixture creates a new generator for each test function.
    Uses the cached dataset fixture for fast initial population sampling.
    """
    from evodiffmol import MoleculeGenerator
    
    gen = MoleculeGenerator(
        checkpoint_path=checkpoint_path,
        model_config=model_config_path,
        ga_config=ga_config_path,
        device=STANDARD_TEST_CONFIG['device'],
        dataset=dataset,
        verbose=False  # Reduce output during tests
    )
    
    return gen


@pytest.fixture
def standard_config():
    """Standard test configuration."""
    return STANDARD_TEST_CONFIG.copy()


@pytest.fixture
def temp_output_dir(tmp_path):
    """Temporary output directory for tests."""
    output_dir = tmp_path / "test_output"
    output_dir.mkdir()
    return str(output_dir)


